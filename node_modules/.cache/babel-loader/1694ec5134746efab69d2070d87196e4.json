{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\caoxue\\\\Desktop\\\\secondary\\\\src\\\\share\\\\button\\\\index.tsx\";\n\n/**\r\n * Created by Lenovo on 2019/8/18.\r\n */\n//import React from 'react';\nimport * as React from 'react';\nimport classnames from 'classnames';\nimport './index.css';\nimport { defaultProps } from './defaultProps';\nimport TouchFeedback from 'rmc-feedback';\nconst rxTwoCNChar = /^[\\u4e00-\\u9fa5]{2}$/;\nconst isTwoCNChar = rxTwoCNChar.test.bind(rxTwoCNChar);\n\nfunction isString(str) {\n  return typeof str === 'string';\n} // Insert one space between two chinese characters automatically.\n\n\nfunction insertSpace(child) {\n  if (isString(child.type) && isTwoCNChar(child.props.children)) {\n    return React.cloneElement(child, {}, child.props.children.split('').join(' '));\n  }\n\n  if (isString(child)) {\n    if (isTwoCNChar(child)) {\n      child = child.split('').join(' ');\n    }\n  }\n\n  return child;\n}\n\nexport default class Button extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleClick = e => {\n      const onClick = this.props.onClick;\n\n      if (onClick) {\n        onClick(e);\n      }\n    };\n  }\n\n  render() {\n    const _this$props = this.props,\n          prefixCls = _this$props.prefixCls,\n          type = _this$props.type,\n          children = _this$props.children,\n          className = _this$props.className;\n    const wrapCls = classnames(prefixCls, className, {\n      [\"\".concat(prefixCls, \"-btn\")]: type === 'primary' || !type,\n      [\"\".concat(prefixCls, \"-btn-fill\")]: type === 'fill'\n    });\n    const kids = React.Children.map(children, insertSpace);\n    return React.createElement(TouchFeedback, {\n      activeClassName: prefixCls + \"-active\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: wrapCls,\n      onClick: this.handleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, kids));\n  }\n\n}\nButton.defaultProps = defaultProps;","map":{"version":3,"sources":["C:\\Users\\caoxue\\Desktop\\secondary\\src\\share\\button\\index.tsx"],"names":["React","classnames","defaultProps","TouchFeedback","rxTwoCNChar","isTwoCNChar","test","bind","isString","str","insertSpace","child","type","props","children","cloneElement","split","join","Button","Component","constructor","handleClick","e","onClick","render","prefixCls","className","wrapCls","kids","Children","map"],"mappings":";;AAAA;;;AAGA;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAO,aAAP;AACA,SAAQC,YAAR,QAA2B,gBAA3B;AACA,OAAOC,aAAP,MAA0B,cAA1B;AAQA,MAAMC,WAAW,GAAG,sBAApB;AACA,MAAMC,WAAW,GAAGD,WAAW,CAACE,IAAZ,CAAiBC,IAAjB,CAAsBH,WAAtB,CAApB;;AACA,SAASI,QAAT,CAAkBC,GAAlB,EAA4B;AACxB,SAAO,OAAOA,GAAP,KAAe,QAAtB;AACH,C,CAED;;;AACA,SAASC,WAAT,CAAqBC,KAArB,EAAiC;AAC7B,MAAIH,QAAQ,CAACG,KAAK,CAACC,IAAP,CAAR,IAAwBP,WAAW,CAACM,KAAK,CAACE,KAAN,CAAYC,QAAb,CAAvC,EAA+D;AAC3D,WAAOd,KAAK,CAACe,YAAN,CACHJ,KADG,EAEH,EAFG,EAGHA,KAAK,CAACE,KAAN,CAAYC,QAAZ,CAAqBE,KAArB,CAA2B,EAA3B,EAA+BC,IAA/B,CAAoC,GAApC,CAHG,CAAP;AAKH;;AACD,MAAIT,QAAQ,CAACG,KAAD,CAAZ,EAAqB;AACjB,QAAIN,WAAW,CAACM,KAAD,CAAf,EAAwB;AACpBA,MAAAA,KAAK,GAAGA,KAAK,CAACK,KAAN,CAAY,EAAZ,EAAgBC,IAAhB,CAAqB,GAArB,CAAR;AACH;AACJ;;AACD,SAAON,KAAP;AACH;;AACD,eAAe,MAAMO,MAAN,SAAqBlB,KAAK,CAACmB,SAA3B,CAAuD;AAElEC,EAAAA,WAAW,CAACP,KAAD,EAAY;AACnB,UAAMA,KAAN;;AADmB,SAGvBQ,WAHuB,GAG6BC,CAAC,IAAI;AAAA,YAC7CC,OAD6C,GACjC,KAAKV,KAD4B,CAC7CU,OAD6C;;AAErD,UAAIA,OAAJ,EAAa;AACRA,QAAAA,OAAD,CAAkDD,CAAlD;AACH;AACJ,KARsB;AAEtB;;AAODE,EAAAA,MAAM,GAAG;AAAA,wBACsC,KAAKX,KAD3C;AAAA,UACEY,SADF,eACEA,SADF;AAAA,UACYb,IADZ,eACYA,IADZ;AAAA,UACiBE,QADjB,eACiBA,QADjB;AAAA,UAC0BY,SAD1B,eAC0BA,SAD1B;AAEL,UAAMC,OAAO,GAAG1B,UAAU,CAACwB,SAAD,EAAYC,SAAZ,EAAuB;AAC7C,iBAAID,SAAJ,YAAuBb,IAAI,KAAK,SAAT,IAAoB,CAACA,IADC;AAE7C,iBAAIa,SAAJ,iBAA2Bb,IAAI,KAAK;AAFS,KAAvB,CAA1B;AAIA,UAAMgB,IAAI,GAAG5B,KAAK,CAAC6B,QAAN,CAAeC,GAAf,CAAmBhB,QAAnB,EAA6BJ,WAA7B,CAAb;AACA,WACA,oBAAC,aAAD;AACI,MAAA,eAAe,EAAEe,SAAS,GAAC,SAD/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEC;AAAK,MAAA,SAAS,EAAEE,OAAhB;AAAyB,MAAA,OAAO,EAAE,KAAKN,WAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAqDO,IAArD,CAFD,CADA;AAIH;;AAtBiE;AAAjDV,M,CACVhB,Y,GAAeA,Y","sourcesContent":["/**\r\n * Created by Lenovo on 2019/8/18.\r\n */\r\n//import React from 'react';\r\nimport * as React from 'react';\r\nimport classnames from 'classnames';\r\nimport './index.css';\r\nimport {defaultProps} from './defaultProps';\r\nimport TouchFeedback from 'rmc-feedback';\r\nexport interface ButtonProps{\r\n    prefixCls?: string;\r\n    onClick?: React.MouseEventHandler<HTMLElement>;\r\n    type?: 'primary' | 'fill';\r\n    children?: React.ReactNode;\r\n    className?: string;\r\n}\r\nconst rxTwoCNChar = /^[\\u4e00-\\u9fa5]{2}$/;\r\nconst isTwoCNChar = rxTwoCNChar.test.bind(rxTwoCNChar);\r\nfunction isString(str: any) {\r\n    return typeof str === 'string';\r\n}\r\n\r\n// Insert one space between two chinese characters automatically.\r\nfunction insertSpace(child: any) {\r\n    if (isString(child.type) && isTwoCNChar(child.props.children)) {\r\n        return React.cloneElement(\r\n            child,\r\n            {},\r\n            child.props.children.split('').join(' '),\r\n        );\r\n    }\r\n    if (isString(child)) {\r\n        if (isTwoCNChar(child)) {\r\n            child = child.split('').join(' ');\r\n        }\r\n    }\r\n    return child;\r\n}\r\nexport default class Button extends React.Component<ButtonProps, any> {\r\n    static defaultProps = defaultProps;\r\n    constructor(props:any) {\r\n        super(props);\r\n    }\r\n    handleClick: React.MouseEventHandler<HTMLElement> = e => {\r\n        const { onClick } = this.props;\r\n        if (onClick) {\r\n            (onClick as React.MouseEventHandler<HTMLElement>)(e);\r\n        }\r\n    };\r\n    render() {\r\n        const {prefixCls,type,children,className} =this.props;\r\n        const wrapCls = classnames(prefixCls, className, {\r\n            [`${prefixCls}-btn`]: (type === 'primary'||!type),\r\n            [`${prefixCls}-btn-fill`]: type === 'fill',\r\n        });\r\n        const kids = React.Children.map(children, insertSpace);\r\n        return(\r\n        <TouchFeedback\r\n            activeClassName={prefixCls+\"-active\"}\r\n        ><div className={wrapCls} onClick={this.handleClick}>{kids}</div></TouchFeedback>)\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}